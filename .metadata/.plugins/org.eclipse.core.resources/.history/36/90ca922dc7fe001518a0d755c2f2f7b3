/**
 *
 */
package edu.lamar.client;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.LinkedBlockingQueue;

import edu.lamar.common.MessageImpl;
import edu.lamar.common.irp.Message;
import edu.lamar.common.irp.MessageTypes;

/**
 * @author user
 *
 */
public class CarClient2 extends AbstractClient {
	private boolean hadIrequestedTheBridge = false;
	private int timeStamp = 0;
	private final Queue<Integer> queue = new LinkedBlockingQueue<Integer>();
	private final int myCarId;
	private final Map<Integer, String> carAcknowledgementStatusMap = new HashMap<>();
	private int onBridge = 0;
	private final String myDirection;

	public CarClient2(int carId, String direction, String host, int port) {
		super(host, port);
		myCarId = carId;
		myDirection = direction;
		carAcknowledgementStatusMap.put(1, "NCK");
		carAcknowledgementStatusMap.put(2, "NCK");
		carAcknowledgementStatusMap.put(3, "NCK");
		carAcknowledgementStatusMap.put(4, "NCK");
	}

	@Override
	protected void handleMessageFromServer(Object msg) {
		final Message myMessage = (Message) msg;
		if (myMessage.getMessageType().equals(MessageTypes.BridgeRequest)) {
			if (!hadIrequestedTheBridge && myDirection.equalsIgnoreCase(myMessage.getDirection())) {
				try {
					sendToServer(new MessageImpl(myCarId, timeStamp, MessageTypes.Acknowledge));
				} catch (final IOException e) {
					e.printStackTrace();
				}
			} else if (hadIrequestedTheBridge) {
				if (timeStamp > myMessage.getTimeStamp()) {
					timeStamp = myMessage.getTimeStamp() + 1;
					try {
						queue.add(myMessage.getCarId());
						sendToServer(new MessageImpl(myCarId, timeStamp, MessageTypes.Acknowledge));
					} catch (final IOException e) {
						e.printStackTrace();
					}
				} else {
					// my message. I need to send ACK to me.
					carAcknowledgementStatusMap.put(myCarId, "ACK");
				}
			} else {
				timeStamp = myMessage.getTimeStamp() + 1;
				queue.add(myMessage.getCarId());
				try {
					sendToServer(new MessageImpl(myCarId, timeStamp, MessageTypes.Acknowledge));
				} catch (final IOException e) {
					e.printStackTrace();
				}
			}
		} else if (myMessage.getMessageType().equals(MessageTypes.BridgRelease)) {
			// remove from queue
			// should be the top car
			if (onBridge == myCarId) {
				// if I am on bridge do these things
				try {
					sendToServer(new MessageImpl(myCarId, timeStamp, MessageTypes.Acknowledge));
				} catch (final IOException e) {
					e.printStackTrace();
				}
				resetAckStatus(carAcknowledgementStatusMap);
				hadIrequestedTheBridge = false;
			} else {
				queue.remove();
			}
			onBridge = 0;

		} else if (myMessage.getMessageType().equals(MessageTypes.Acknowledge)) {
			// Acknowledge
			if (hadIrequestedTheBridge) {
				carAcknowledgementStatusMap.put(myMessage.getCarId(), "ACK");
			}
			if (getUpdatedAckStatus(carAcknowledgementStatusMap)) {
				try {
					System.out.println("I am on bridge: " + myCarId);
					sendToServer(new MessageImpl(myCarId, myMessage.getTimeStamp() + 1, MessageTypes.OnBridge));
				} catch (final IOException e) {
					e.printStackTrace();
				}
			}
		} else {
			onBridge = myMessage.getCarId();
			System.out.println("On bridge: " + onBridge);
		}
	}

	private void resetAckStatus(Map<Integer, String> carAcknowledgementStatusMap2) {
		carAcknowledgementStatusMap.put(1, "NCK");
		carAcknowledgementStatusMap.put(2, "NCK");
		carAcknowledgementStatusMap.put(3, "NCK");
		carAcknowledgementStatusMap.put(4, "NCK");
	}

	private boolean getUpdatedAckStatus(Map<Integer, String> carAcknowledgementStatusMap2) {
		for (final Entry<Integer, String> entry : carAcknowledgementStatusMap2.entrySet()) {
			if (entry.getValue().equals("NCK")) {
				return false;
			}
		}
		return true;
	}

	private int getCurrentTimeStamp() {
		timeStamp = timeStamp + 1;
		return timeStamp;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			final Scanner scanner = new Scanner(new InputStreamReader(System.in));
			System.out.println("Enter Car Id:");
			final int carId = scanner.nextInt();
			System.out.println("F for FWD and B for BCK");
			final String direction = scanner.next();
			final CarClient2 myClient = new CarClient2(carId, direction, "localhost", 5555);
			myClient.openConnection();
			System.out.println("Press 1 for bridge request & 2 for bridge release");
			while (true) {
				final int option = scanner.nextInt();
				if (option == 2) {
					if (!myClient.hadIrequestedTheBridge) {
						System.out.println("Please request the bridge first");
					} else {
						myClient.sendToServer(new MessageImpl(myClient.myCarId, myClient.getCurrentTimeStamp(),
								direction, MessageTypes.BridgRelease));
					}
				} else if (option == 1) {
					myClient.hadIrequestedTheBridge = true;
					myClient.sendToServer(new MessageImpl(carId, myClient.getCurrentTimeStamp(), direction,
							MessageTypes.BridgeRequest));
				} else {
					break;
				}
			}
			scanner.close();
		} catch (final IOException e) {
			e.printStackTrace();
		}
	}

}
